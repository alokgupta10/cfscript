Absolutely! Here’s your updated dynamic test runner script, with module-specific environment variables hardcoded and applied automatically during each test run.

⸻

Final Dynamic Script with Per-Module Environment Variables

#!/bin/bash

# Activate virtual environment
source /harness/venv_linux/bin/activate
export PATH="/harness/venv_linux/bin:$PATH"
export PYTHONPATH=$PYTHONPATH:$(pwd)

# Define cert path
CERT_PATH="/harness/DHS_CA4_FullBundle.crt"

# Define test modules and paths
MODULES=("cci_orchestrator" "cci_assessment_prep" "cci_analyzer")
TEST_PATHS=(
  "/harness/cci_orchestrator/tests/unit"
  "/harness/cci_assessment_prep/tests/unit"
  "/harness/cci_analyzer/tests/unit"
)

# Function to export env vars for each module
set_env_vars() {
  local module=$1

  if [[ "$module" == "cci_orchestrator" ]]; then
    export IS_NAUTILUS_MOCKED=No
    export IS_AWS_MOCKED=No
    export IMPORTS_ARE_ABSOLUTE=No
    export IS_PYTEST=No
    export IS_MYSQL_MOCKED=No
    export MYSQL_USE_LOCALHOST=No
    export IS_RABBITMQ_MOCKED=No
    export IS_SPLUNK_MOCKED=No
    export IS_CASM_MOCKED=No

  elif [[ "$module" == "cci_assessment_prep" ]]; then
    export IS_NAUTILUS_MOCKED=Yes
    export IS_AWS_MOCKED=No
    export IMPORTS_ARE_ABSOLUTE=No
    export IS_PYTEST=No
    export IS_MYSQL_MOCKED=Yes
    export MYSQL_USE_LOCALHOST=No
    export IS_RABBITMQ_MOCKED=No
    export IS_SPLUNK_MOCKED=Yes
    export IS_CASM_MOCKED=No

  elif [[ "$module" == "cci_analyzer" ]]; then
    export IS_NAUTILUS_MOCKED=No
    export IS_AWS_MOCKED=Yes
    export IMPORTS_ARE_ABSOLUTE=Yes
    export IS_PYTEST=No
    export IS_MYSQL_MOCKED=No
    export MYSQL_USE_LOCALHOST=Yes
    export IS_RABBITMQ_MOCKED=No
    export IS_SPLUNK_MOCKED=No
    export IS_CASM_MOCKED=No
  fi
}

# Loop through and run each module's tests
for i in "${!MODULES[@]}"; do
  MODULE=${MODULES[$i]}
  TEST_PATH=${TEST_PATHS[$i]}

  echo "--------------------------------------"
  echo "Running unit tests for module: $MODULE"
  echo "Test path: $TEST_PATH"
  echo "--------------------------------------"

  set_env_vars "$MODULE"
  export REQUESTS_CA_BUNDLE="$CERT_PATH"

  pytest "$TEST_PATH" -vs -p no:warnings
done



⸻

What This Does:
	•	Automatically sets correct environment variables for each module.
	•	Runs pytest per module with those variables applied.
	•	Centralizes everything in a single, clean, scalable script.

You can now paste this into a Harness step or store it as a shell script in your repo for reuse.

Need it as a reusable Harness template or want to break it into parallel steps? I can help with that too.
